{"version":3,"file":"new-idea-form-block/index.js","mappings":"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","sources":["webpack://roadmapwp-pro/./src/new-idea-form-block/edit.js","webpack://roadmapwp-pro/./src/new-idea-form-block/save.js","webpack://roadmapwp-pro/external window \"React\"","webpack://roadmapwp-pro/external window [\"wp\",\"blockEditor\"]","webpack://roadmapwp-pro/external window [\"wp\",\"blocks\"]","webpack://roadmapwp-pro/external window [\"wp\",\"components\"]","webpack://roadmapwp-pro/external window [\"wp\",\"data\"]","webpack://roadmapwp-pro/external window [\"wp\",\"i18n\"]","webpack://roadmapwp-pro/webpack/bootstrap","webpack://roadmapwp-pro/webpack/runtime/compat get default export","webpack://roadmapwp-pro/webpack/runtime/define property getters","webpack://roadmapwp-pro/webpack/runtime/hasOwnProperty shorthand","webpack://roadmapwp-pro/webpack/runtime/make namespace object","webpack://roadmapwp-pro/./src/new-idea-form-block/index.js"],"sourcesContent":["import { useBlockProps, InspectorControls } from '@wordpress/block-editor';\nimport { PanelBody, CheckboxControl } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\nexport default function Edit({ attributes, setAttributes }) {\n    // Fetch statuses\n\tconst statuses = useSelect(select => {\n\t\t\n\t\treturn select('core').getEntityRecords('taxonomy', 'idea-status', { per_page: -1 });\n\t}, []);\n\tconsole.log('statuses are:', statuses);\n\n\t// Update function for statuses\n\tconst updateSelectedStatuses = (termId, isChecked) => {\n\t\tconst newStatuses = { ...attributes.selectedStatuses, [termId]: isChecked };\n\t\tsetAttributes({ selectedStatuses: newStatuses });\n\t};\n\n\t// Fetch other taxonomies associated with 'idea' post type, excluding 'idea-status'\n\tconst taxonomies = useSelect(select => {\n\t\t\n\t\tconst allTaxonomies = select('core').getTaxonomies();\n\t\treturn allTaxonomies ? allTaxonomies.filter(tax => tax.types.includes('idea') && tax.slug !== 'idea-status') : [];\n\t}, []);\n\tconsole.log('taxonomies are:', taxonomies);\n\n\t// Update function for taxonomies\n\tconst updateSelectedTaxonomies = (taxonomySlug, isChecked) => {\n\t\tconst newTaxonomies = { ...attributes.selectedTaxonomies, [taxonomySlug]: isChecked };\n\t\tsetAttributes({ selectedTaxonomies: newTaxonomies });\n\t};\n\n\treturn (\n\t\t<div {...useBlockProps()}>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title=\"Select Statuses for New Idea\">\n\t\t\t\t\t{statuses && statuses.map(term => (\n\t\t\t\t\t\t<CheckboxControl\n\t\t\t\t\t\t\tkey={term.id}\n\t\t\t\t\t\t\tlabel={term.name}\n\t\t\t\t\t\t\tchecked={!!attributes.selectedStatuses[term.id]}\n\t\t\t\t\t\t\tonChange={(isChecked) => updateSelectedStatuses(term.id, isChecked)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</PanelBody>\n\t\t\t\t<PanelBody title=\"Idea Taxonomies\">\n\t\t\t\t\t{taxonomies && taxonomies.map(taxonomy => (\n\t\t\t\t\t\t<CheckboxControl\n\t\t\t\t\t\t\tkey={taxonomy.slug}\n\t\t\t\t\t\t\tlabel={taxonomy.name}\n\t\t\t\t\t\t\tchecked={!!attributes.selectedTaxonomies[taxonomy.slug]}\n\t\t\t\t\t\t\tonChange={(isChecked) => updateSelectedTaxonomies(taxonomy.slug, isChecked)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</PanelBody>\n\t\t\t\t<PanelBody title=\"Access Control\">\n\t\t\t\t\t<CheckboxControl\n\t\t\t\t\t\tlabel=\"Allow only logged in users to see this form?\"\n\t\t\t\t\t\tchecked={attributes.onlyLoggedInUsers}\n\t\t\t\t\t\tonChange={(isChecked) => setAttributes({ onlyLoggedInUsers: isChecked })}\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<p>New Idea Form will be displayed here.</p>\n\t\t</div>\n\t);\n}\n","export default function save() {\n    return null;\n}","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"i18n\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nregisterBlockType(metadata, {\n    edit,\n    save,\n});\n"],"names":["useBlockProps","InspectorControls","PanelBody","CheckboxControl","useSelect","__","Edit","attributes","setAttributes","statuses","select","getEntityRecords","per_page","console","log","updateSelectedStatuses","termId","isChecked","newStatuses","selectedStatuses","taxonomies","allTaxonomies","getTaxonomies","filter","tax","types","includes","slug","updateSelectedTaxonomies","taxonomySlug","newTaxonomies","selectedTaxonomies","createElement","title","map","term","key","id","label","name","checked","onChange","taxonomy","onlyLoggedInUsers","save","registerBlockType","metadata","edit"],"sourceRoot":""}